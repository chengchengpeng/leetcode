/*
 * @Descripttion:
 * @version:
 * @Author: chengchengpeng
 * @Date: 2021-06-02 13:15:19
 * @LastEditors: chengchengpeng
 * @LastEditTime: 2021-06-02 16:27:05
 */
// 编写一个程序，通过填充空格来解决数独问题。

// 数独的解法需 遵循如下规则：

// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
// 数独部分空格内已填入了数字，空白格用 '.' 表示。

var solveSudoku = function(board) {
  let flag = false
  dfs(0,0)
  function dfs(x, y) {
    if (x === 9) {
      flag = true
      return
    }
    let n, m
    if (y === 8) {
      n = x+1
      m = 0
    }else {
      n = x
      m = y+1
    }
    if (board[x][y] === ".") {
      for (let i = 1; i<=9; i++) {
        if (canset(x, y, `${i}`)) {
          board[x][y] = `${i}`
          dfs(n,m)
          if (!flag) {
            board[x][y]= "."
          }
        }
      }
    }else {
      dfs(n,m)
    }
  }

  function canset(i, j, nums) {
    if (board[i].includes(nums)) return false
    for (let k = 0; k<9; k++) {
      if (board[k][j] === nums) return false
    }
    for (let n = Math.floor(i/3)*3; n<Math.ceil(i/3)*3; n++){
      for (let m = Math.floor(j/3)*3; m<Math.ceil(j/3)*3; m++){
        if (board[n][m] === nums) return false
      }
    }
    return true
  }
};

let board = [[".",".","9","7","4","8",".",".","."],["7",".",".",".",".",".",".",".","."],[".","2",".","1",".","9",".",".","."],[".",".","7",".",".",".","2","4","."],[".","6","4",".","1",".","5","9","."],[".","9","8",".",".",".","3",".","."],[".",".",".","8",".","3",".","2","."],[".",".",".",".",".",".",".",".","6"],[".",".",".","2","7","5","9",".","."]]

debugger
solveSudoku(board)
console.log(board);

[
  [
    '3', '5', '9','7', '4', '8', '1', '6', '2'
  ],
  [
    '7', '8', '1','4', '3', '2', '6', '5', '9'
  ],
  [
    '4', '2', '6','1', '5', '9', '8', '7', '3'
  ],
  [
    '1', '3', '7','9', '8', '6', '2', '4', '5'
  ],
  [
    '2', '6', '4','3', '1', '7', '5', '9', '8'
  ],
  [
    '5', '9', '8','6', '2', '4', '3', '1', '7'
  ],
  [
    '9', '1', '5','8', '6', '3', '7', '2', '4'
  ],
  [
    '8', '7', '2','5', '9', '1', '4', '3', '6'
  ],
  [
    '6', '4', '3','2', '7', '5', '9', '8', '1'
  ]
]
